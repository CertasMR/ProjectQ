<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="icon" href="@Url.Content("~/favicon.gif")" />
    <title>@ViewBag.Title - Hot Right Now</title>
    @Styles.Render("~/Content/css")
    @Scripts.Render("~/bundles/modernizr")

</head>
<body>
    <div id="sunBackground" style="width: 100%; height: 100%; position: fixed; "></div>
    <div class="navbar navbar-expand-lg navbar-dark div-black">
        <div class="container">
            <a class="navbar-brand" href="\">Hot Right Now</a>
            <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarColor01" aria-controls="navbarColor01" aria-expanded="true" aria-label="Toggle navigation" style="">
                <span class="navbar-toggler-icon"></span>
            </button>

            <div class="navbar-collapse collapse " id="navbarColor01" style="">
                <ul class="nav navbar-nav ">
                    <li class="nav-item-pad ">
                        @Html.ActionLink("Nearby", "Nearby{ll}", "Hottest")
                    </li>
                    <li class="nav-item">
                        @Html.ActionLink("Explore From Here", "Explore{ll}", "Hottest")
                    </li>
                    <li class="nav-item">
                        @Html.ActionLink("Look Further", "ScatterGunSearch{ll}", "Hottest")
                    </li>
                    <li class="nav-item">
                        @Html.ActionLink("API", "API", "Home")
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <br />
<div class="container body-content footer-clear" style="position: relative; opacity: 0.8;">

        @RenderBody()

        <footer>
            <p>&copy; @DateTime.Now.Year - Matt Rickard</p>
        </footer>
    </div>

    @Scripts.Render("~/bundles/jquery")
    @Scripts.Render("~/bundles/bootstrap")

    @RenderSection("scripts", required: false)
    <script src="~/signalr/hubs"></script>
    <script>
        // Get the users location based on their IP address.
        // Append it to Action Links containing {LL}
        // MVC doesn't like dots in the URL so use underscore and replace them later.
        $.getJSON('http://api.ipstack.com/check?access_key=ade6b937132f3d8c4b02365d7b21a00f&format=1')
            .success(function (data) {
                var lat = data.latitude.toString(); //.replace('.', '_');
                var lng = data.longitude.toString(); //.replace('.', '_');
                var links = document.getElementsByTagName('a');
                for (var i = 0; i < links.length; i++) {
                    links[i].href = links[i].href.replace("%7Bll%7D", "/" + lat + "/" + lng + "/");
                }
            })
            .error(function (error) {
                // If you can't find the location, assume that the user is in Yeadon.
                var links = document.getElementsByTagName('a');
                for (var i = 0; i < links.length; i++) {
                    links[i].href = links[i].href.replace("%7Bll%7D", "/53.85/-1.69/");
                }
            });
    </script>



    <script src="/Content/Sun/three.js"></script>
    <script src="/Content/Sun/ConvolutionShader.js"></script>
    <script src="/Content/Sun/CopyShader.js"></script>
    <script src="/Content/Sun/FilmShader.js"></script>
    <script src="/Content/Sun/EffectComposer.js"></script>
    <script src="/Content/Sun/ShaderPass.js"></script>
    <script src="/Content/Sun/MaskPass.js"></script>
    <script src="/Content/Sun/RenderPass.js"></script>
    <script src="/Content/Sun/BloomPass.js"></script>
    <script src="/Content/Sun/FilmPass.js"></script>
    <script src="/Content/Sun/WebGL.js"></script>
    <script id="fragmentShader" type="x-shader/x-fragment">
        uniform float time;

        uniform float fogDensity;
        uniform vec3 fogColor;

        uniform sampler2D texture1;
        uniform sampler2D texture2;

        varying vec2 vUv;

        void main( void ) {

        vec2 position = - 1.0 + 2.0 * vUv;

        vec4 noise = texture2D( texture1, vUv );
        vec2 T1 = vUv + vec2( 1.5, - 1.5 ) * time * 0.02;
        vec2 T2 = vUv + vec2( - 0.5, 2.0 ) * time * 0.01;

        T1.x += noise.x * 2.0;
        T1.y += noise.y * 2.0;
        T2.x -= noise.y * 0.2;
        T2.y += noise.z * 0.2;

        float p = texture2D( texture1, T1 * 2.0 ).a;

        vec4 color = texture2D( texture2, T2 * 2.0 );
        vec4 temp = color * ( vec4( p, p, p, p ) * 2.0 ) + ( color * color - 0.1 );

        if( temp.r > 1.0 ) { temp.bg += clamp( temp.r - 2.0, 0.0, 100.0 ); }
        if( temp.g > 1.0 ) { temp.rb += temp.g - 1.0; }
        if( temp.b > 1.0 ) { temp.rg += temp.b - 1.0; }

        gl_FragColor = temp;

        float depth = gl_FragCoord.z / gl_FragCoord.w;
        const float LOG2 = 1.442695;
        float fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );
        fogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );

        gl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );

        }

    </script>
    <script id="vertexShader" type="x-shader/x-vertex">
        uniform vec2 uvScale;
        varying vec2 vUv;

        void main()
        {

        vUv = uvScale * uv;
        vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );
        gl_Position = projectionMatrix * mvPosition;

        }

    </script>
    <script>

        if (WEBGL.isWebGLAvailable() === false) {

            document.body.appendChild(WEBGL.getWebGLErrorMessage());

        }

        var container;

        var camera, scene, renderer, composer, clock;

        var uniforms, mesh;

        init();
        animate();

        function init() {

            container = document.getElementById('sunBackground');

            camera = new THREE.PerspectiveCamera(35, window.innerWidth / window.innerHeight, 1, 3000);
            camera.position.z = 4;

            scene = new THREE.Scene();

            clock = new THREE.Clock();

            var textureLoader = new THREE.TextureLoader();

            uniforms = {

                fogDensity: { value: 0.25 },
                fogColor: { value: new THREE.Vector3(0, 0, 0) },
                time: { value: 1.0 },
                uvScale: { value: new THREE.Vector2(3.0, 1.0) },
                texture1: { value: textureLoader.load('/Content/Sun/cloud.png') },
                texture2: { value: textureLoader.load('/Content/Sun/lavatile.jpg') }

            };

            uniforms.texture1.value.wrapS = uniforms.texture1.value.wrapT = THREE.RepeatWrapping;
            uniforms.texture2.value.wrapS = uniforms.texture2.value.wrapT = THREE.RepeatWrapping;

            var size = 1;

            var material = new THREE.ShaderMaterial({

                uniforms: uniforms,
                vertexShader: document.getElementById('vertexShader').textContent,
                fragmentShader: document.getElementById('fragmentShader').textContent

            });

            //mesh = new THREE.Mesh( new THREE.TorusBufferGeometry( size, 0.3, 30, 30 ), material );
            mesh = new THREE.Mesh(new THREE.SphereBufferGeometry(size, 20, 20), material);
            mesh.rotation.x = 0.0;
            scene.add(mesh);

            //

            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            container.appendChild(renderer.domElement);
            renderer.autoClear = false;


            //

            var renderModel = new THREE.RenderPass(scene, camera);
            var effectBloom = new THREE.BloomPass(3);
            var effectFilm = new THREE.FilmPass(0.35, 0.95, 2048, false);

            effectFilm.renderToScreen = true;

            composer = new THREE.EffectComposer(renderer);

            composer.addPass(renderModel);
            composer.addPass(effectBloom);
            composer.addPass(effectFilm);

            //

            onWindowResize();

            window.addEventListener('resize', onWindowResize, false);

        }

        function onWindowResize() {

            renderer.setSize(window.innerWidth, window.innerHeight);

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            composer.reset();

        }

        //

        function animate() {

            requestAnimationFrame(animate);

            render();

        }

        function render() {

            var delta = 5 * clock.getDelta();

            uniforms.time.value += 0.2 * delta;

            //mesh.rotation.y += 0.0125 * delta;
            //mesh.rotation.x += 0.05 * delta;

            mesh.rotation.y += 0.05 * delta;
            //mesh.rotation.x += 0.05 * delta;

            renderer.clear();
            composer.render(0.01);

        }

    </script>


</body>
</html>
